Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт
до лабораторної роботи №2
з «Архітектура програмного забезпечення»












Виконав:                                                                                              Перевірив:
ст. гр. ПЗПІ-22-9                                                                           ас. кафедри ПІ
Переверзэв Г. В                                                                           Дашенков Д. С.
                                                  










Харків 2025
________________
1 ІСТОРІЯ ЗМІН


Таблиця 1 - Історія змін
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	05.06.2025
	0.1
	Створено звіт
	



2 ЗАВДАННЯ


Тема: Мобільний застосунок
На цій лабораторній роботі потрібно розробити мобільний програмний застосунок для будь-якої поширеної на сьогодні мобільної платформи. Мобільний застосунок повинен бути частиною системи і повинен взаємодіяти з нею. Для реалізації програмного застосунку можна використовувати технології для реалізації програмного забезпечення для мобільних платформ, вказані лектором, а саме Kotlin для Android та Swift для iOS.








________________


3 ОПИС ВИКОНАНОЇ РОБОТИ


        3.1 Опис прийнятих інженерних рішень
Під час реалізації мобільного застосунку OrthoVision було прийнято низку ключових інженерних та архітектурних рішень, що забезпечили гнучкість, зручність розширення, стабільність роботи з IoT-пристроями та якісний користувацький досвід.
1) Вибір мови Kotlin та Jetpack Compose
        Основна мова розробки — Kotlin, яка є рекомендованою Google для сучасної Android-розробки. В UI-частині застосовано компоненти Android Jetpack, що гарантує підтримку останніх практик розробки і сумісність з більшістю Android-пристроїв.
2) Архітектура MVVM
        Для мобільного застосунку OrthoVision було обрано архітектуру MVVM, що дозволяє забезпечити чітке розділення відповідальностей, полегшити підтримку та масштабування системи.
Проєкт має три основні теки:
* models — містить усі сутності даних, такі як користувачі, лікарі, записи на прийом, дані смарт-окулярів;
* remote — реалізує взаємодію з API та репозиторії для роботи з даними;
* screens — кожен екран представлений тріадою файлів: власне View, ViewModel і ViewModelFactory, що відповідають за UI, бізнес-логіку та створення ViewModel відповідно.
3) Зв’язок із backend через Retrofit
        Для інтеграції з серверною частиною проєкту використовується бібліотека Retrofit, яка забезпечує типізовану роботу з REST API. Для кожної сутності системи (користувачі, лікарі, записи, окуляри) реалізовано окремий інтерфейс сервісу, що покращує підтримку та масштабування.
4) Інтеграція з IoT через ngrok
        Смарт-окуляри зчитують дані про навантаження на очі та кут нахилу голови. Для зв’язку з сервером використовується проміжний IoT-шлюз із підтримкою HTTP-протоколу. На етапі розробки застосовувався ngrok для тунелювання даних у локальному середовищі.
5) Авторизація та безпека
        Для безпечного доступу реалізована аутентифікація через JWT. Токен зберігається локально та автоматично додається до кожного мережевого запиту. При старті застосунку перевіряється валідність токена, щоб вирішити, чи потрібно авторизуватися повторно.
6) Валідація форм і користувацький досвід
        В усіх формах (вхід, реєстрація, запис на прийом) реалізовано клієнтську валідацію, що дозволяє уникнути помилок ще до надсилання запитів на сервер. Повідомлення про помилки адаптовані для зручного сприйняття користувачами.
7) Масштабованість
        Архітектура дозволяє безболісно розширювати функціонал — наприклад, додати розділ з відгуками, медичною статистикою, або нові сенсорні модулі смарт-окулярів. Компоненти слабо зв’язані між собою і чітко виконують свою роль.
8) Локальне збереження та сесії
        Для збереження даних користувача та токена використовуються SharedPreferences. Це забезпечує стабільну роботу сесій та повернення користувача до роботи без повторного входу після перезапуску застосунку.




3.2 Опис взаємодії компонентів  мобільного застосунку одне з одним та з іншими елементами системи.
Мобільний застосунок OrthoVision розроблений із чіткою модульною структурою на основі архітектури MVVM, що забезпечує розділення логіки на рівні UI, бізнес-логіки та управління даними. Нижче наведено опис основних компонентів та їх взаємодії:
1) Основна точка входу: MainActivity.kt
        Відповідає за ініціалізацію сесії користувача, керує TokenManager, перевіряє авторизацію та запускає навігацію по застосунку.
2) Маршрутизація: ui.navigation
Навігація здійснюється через NavController, який управляє переходами між ключовими екранами: логін, реєстрація, дашборд, статистика зі смарт-окулярів, списки лікарів, записи на прийом, медичні картки тощо.
3) Екрани (ui.screens)
Кожен екран реалізований триадою файлів — Screen.kt, ViewModel.kt та ViewModelFactory.kt (наприклад, RegisterScreen.kt, RegisterViewModel.kt, RegisterViewModelFactory.kt).
* Screen.kt — реалізує інтерфейс користувача та відображає стан, надаючи можливість взаємодії з користувачем.
* ViewModel.kt — містить бізнес-логіку, обробляє події та управляє станом екрану, взаємодіючи з репозиторіями.
* ViewModelFactory.kt — забезпечує створення екземплярів ViewModel з необхідними залежностями.


4) Авторизація (login, register)
Екрани входу та реєстрації взаємодіють з AuthRepository через AuthApi, відправляють запити для аутентифікації та реєстрації. При успішному вході JWT-токен зберігається у TokenManager, а дані користувача — у відповідних моделях.
5) Екран головної панелі: HomeScreen.kt
        Екран клінік відображає список клінік у вигляді карток, які формуються на основі даних, отриманих через ClinicRepository з бекенду. Дані передаються у відповідний ViewModel, де зберігаються у стані для реактивного оновлення UI. Користувач може обрати потрібну клініку, після чого її ідентифікатор зберігається у локальному сховищі для подальшого використання при створенні запису на прийом.
6) Екран вибору лікарів: DoctorScreen.kt
        Відображає список лікарів у вигляді карток, отриманих через DoctorsRepository із сервера. Виводяться лише ті лікарі, які мають вільні години в обраній користувачем клініці. Дані зберігаються у відповідному ViewModel і оновлюють UI реактивно. Користувач може обрати лікаря, після чого його ідентифікатор зберігається локально для подальшого використання при створенні запису на прийом.
7) Екран запису до лікаря: DoctorDetailsScreen.kt
         На цьому екрані користувачу відображається повний список вільних годин лікаря для запису, а також коротка інформація про самого лікаря (спеціалізація, контактні дані тощо). Для зручності вибору доступна календарна компонента, яка дозволяє обрати конкретну дату. Після вибору дати відбувається оновлення списку вільних годин саме для обраного дня.
Для створення запису на прийом застосунок формує POST-запит через AppointmentApi, у якому передаються дані про обрану годину, дату, а також ідентифікатори лікаря і користувача. Таким чином відбувається реєстрація нового запису у системі.


8) Екран карти пацієнта: MedicalRecordScreen.kt
        Даний екран відображає повну історію медичних записів пацієнта, отриманих через MedicalRecordApi. Інформація подається у вигляді списку з детальним описом кожного візиту, діагнозами, призначеннями та іншими медичними даними. Це дозволяє користувачу легко переглядати власну медичну історію в одному місці.
9) Екран поточних записів: AppointmentsScreen.kt
        Цей екран відображає список поточних записів користувача, отриманих через AppointmentApi. Користувач може переглядати деталі кожного запису, а також має можливість видалити запис за допомогою відповідного запиту DELETE до API. Інтерфейс забезпечує зручне управління активними прийомами та їх своєчасне оновлення.
10) Екран статистики зі смарт-окулярів: SmartGlassesStatisticsScreen.kt
        На цьому екрані відображається статистика користування смарт-окулярами. Зокрема, виводяться дані про час перебування в умовах надмірного освітлення, недостатнього освітлення, а також інформація про неправильний нахил голови. Дані отримуються через SmartGlassesApi і обробляються відповідним репозиторієм для подальшого відображення у вигляді зручних візуальних компонентів.
11) Локальне збереження
        TokenManager використовує SharedPreferences для надійного збереження JWT-токена, що забезпечує відновлення сесії після перезапуску. Дані користувача зберігаються у відповідних моделях у пам’яті.
12) Зв’язок із сервером
        HTTP-запити реалізовані через Retrofit, налаштований у RetrofitInstance. Кожен API-інтерфейс (AuthApi, AppointmentApi, ClinicApi тощо) обробляє свій набір ендпоінтів. Для додавання токена у заголовки використовується AuthInterceptor.
13) Валідація та UX
        У формах логіну, реєстрації та інших екранах реалізована клієнтська валідація даних із відображенням зрозумілих повідомлень про помилки для покращення користувацького досвіду.
Структура OrthoVision розділяє UI, бізнес-логіку, збереження даних і мережеву взаємодію. Screen.kt відповідає за інтерфейс, ViewModel.kt — за логіку, ViewModelFactory.kt — за створення ViewModel. Репозиторії керують даними, API — зв’язком із сервером. Це забезпечує зрозумілий, підтримуваний і масштабований код.


Посилання на github:
https://github.com/NurePereverzievHlib/apz-pzpi-22-9-pereverziev-hlib/tree/main/Lab2








________________


3.3 UML діаграма прецедентів (Use Case Diagram)
  

Рисунок 3.1 – UML діаграма прецедентів
















3.4 UML діаграма компонентів (Component Diagram)
  

Рисунок 3.2 – UML діаграма компонентів


























3.5 UML діаграма пакетів (Package Diagram)
  

Рисунок 3.3 – UML діаграма пакетів






















3.6 UML діаграма діяльності (Activity Diagram)
Сценарій: Працівник використовує мобільний застосунок
  

Рисунок 3.4 – UML діаграма діяльності
________________
4 ВИСНОВКИ
У ході виконання лабораторної роботи було розроблено повноцінний мобільний застосунок OrthoVision мовою Kotlin для платформи Android. Цей застосунок у складі програмної системи відповідає виключно за потреби актора «пацієнт» і виконує лише одну роль — забезпечує взаємодію пацієнта з медичною системою.
Застосунок реалізує основний функціонал, необхідний пацієнту: авторизацію та реєстрацію, перегляд інформаційної панелі, роботу із записами на прийом, а також перегляд інформації про власні медичні записи.
Під час розробки було впроваджено архітектурний поділ коду на логічні пакети з чітким розмежуванням відповідальностей, забезпечено обробку HTTP-запитів за допомогою бібліотеки Retrofit, реалізовано зберігання токена та інформації про користувача через SharedPreferences, а навігацію між екранами виконано з використанням Jetpack Navigation та Jetpack Compose.
Застосунок працює асинхронно та взаємодіє із серверною частиною, підключеною через ngrok, що дає змогу працювати з локальним backend і базою даних медичних записів.
Уся система побудована з урахуванням масштабованості та готовності до подальшого розвитку, а створені UML-діаграми відображають структуру та логіку застосунку, що сприяє його супроводу та аналізу.

Міністерство освіти і науки України
Харківський національний університет радіоелектроніки




Кафедра програмної інженерії




Звіт
до лабораторної роботи №3
з «Архітектура програмного забезпечення»












Виконав:                                                                                              Перевірив:
ст. гр. ПЗПІ-22-9                                                                           ас. кафедри ПІ
Переверзєв Г. В.                                                                           Дашенков Д.С.
                                                  












Харків 2025
________________
1 ІСТОРІЯ ЗМІН


Таблиця 1 - Історія змін
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	07.06.2025
	0.1
	Створено звіт
	



2 ЗАВДАННЯ


Тема:Web-застосунок
У межах цієї лабораторної роботи необхідно реалізувати front-end частину програмної системи, яка забезпечує веб-доступ для користувачів і адміністраторів через окремі інтерфейси відповідно до ролей. Обидві частини інтерфейсу повинні підтримувати інтернаціоналізацію та локалізацію, зокрема українську й англійську мови, регіональні формати дати й часу, правила сортування тексту та напрями введення. Інтерфейс адміністрування має включати можливості керування користувачами, управління даними, створення резервних копій, а також експорт і імпорт налаштувань та даних системи.


________________


3 ОПИС ВИКОНАНОЇ РОБОТИ


        3.1 Опис прийнятих інженерних рішень
У вебверсії застосунку OrthoVision реалізовано модульну архітектуру з чітким розподілом відповідальностей між компонентами інтерфейсу, бізнес-логікою та роботою з бекендом. Для побудови користувацького інтерфейсу використано фреймворк React з TypeScript, що забезпечує високу продуктивність, підтримку типізації та зручність у масштабуванні.
Для маршрутизації застосовано бібліотеку Next.js, яка надає як серверний рендеринг (SSR), так і клієнтську навігацію, що покращує продуктивність та SEO. Для обробки HTTP-запитів використано бібліотеку axios, яка забезпечує зручний та надійний зв’язок із бекендом.
Серверна частина представлена REST API, реалізованим на Go (Fiber), що гарантує високу швидкість обробки запитів та масштабованість. Для збереження даних використовується PostgreSQL.
У вебзастосунку реалізовано рольову модель користувачів (адміністратор, лікар), що визначає рівні доступу до функціоналу, зокрема перегляд, створення, редагування та видалення записів на прийом.
Для стилізації застосовано CSS-модулі та компоненти зі стилями, що дозволяє уникнути конфліктів у стилях і підтримувати їх в актуальному стані.
Вебзастосунок спроєктовано з урахуванням можливості подальшого розвитку, інтеграції нових сервісів та масштабування системи.


3.2 Опис взаємодії компонентів web-застосунку одне з одним та з іншими елементами системи
Веб-застосунок OrthoVision побудований за модульним принципом, де кожен компонент виконує свою чітко визначену функцію і взаємодіє з іншими через стандартизовані інтерфейси.
* Інтерфейс користувача (React-компоненти) відповідає за відображення інформації та взаємодію з користувачем. Дані отримуються через HTTP-запити до серверної частини, а введена користувачем інформація передається для обробки.

* Маршрутизація (Next.js) забезпечує навігацію між сторінками, підтримуючи як серверний рендеринг, так і клієнтську навігацію для швидкої і плавної роботи.

* HTTP-клієнт (native fetch API) відповідає за відправку асинхронних запитів до серверу. Він інкапсулює логіку авторизації, обробки помилок і передачі даних.

* Серверна частина обробляє запити, виконує бізнес-логіку, взаємодіє з базою даних і повертає необхідну інформацію.

* База даних (PostgreSQL) зберігає інформацію про користувачів, записи на прийом, діагнози та інші сутності системи.

Взаємодія між компонентами відбувається через визначений протокол HTTP, який може реалізовувати REST-подібні або інші стилі API залежно від специфіки бекенду.
Крім того, вебзастосунок взаємодіє з мобільним застосунком OrthoVision через спільний сервер, що забезпечує уніфікований доступ до даних і синхронізацію інформації між різними платформами.


Посилання на github:
https://github.com/NurePereverzievHlib/apz-pzpi-22-9-pereverziev-hlib/tree/main/Lab3
3.3 UML діаграма прецедентів (Use Case Diagram)
  

Рисунок 3.1 – UML діаграма прецедентів
















3.4 UML діаграма компонентів (Component Diagram)
  

Рисунок 3.2 – UML діаграма компонентів


























3.5 UML діаграма пакетів (Package Diagram)
  

Рисунок 3.3 – UML діаграма пакетів




















3.6 UML діаграма діяльності (Activity Diagram)
Сценарій - “Додавання нового об’єкта до бази даних”
  

Рисунок 3.4 – UML діаграма діяльності








________________


4 ВИСНОВКИ
 У ході виконання лабораторної роботи було спроєктовано та реалізовано фронтенд-частину веб-застосунку OrthoVision, призначеного для підтримки медичного обслуговування в клініках. Застосунок враховує рольову модель користувачів: адміністратор має доступ до функцій керування даними клініки, а лікар працює з записами пацієнтів і може змінювати статуси та вносити діагнози.
Інтерфейс розроблено з використанням React та Next.js, що забезпечило зручну маршрутизацію, модульну структуру та оптимізацію рендерингу. Для взаємодії з серверною частиною застосовуються вбудовані інструменти JavaScript (fetch API), а збереження авторизаційної інформації реалізовано через локальне сховище браузера (localStorage).
Код організовано у вигляді логічних пакетів (pages, components, services, utils, types), що відповідають за окремі аспекти застосунку. Така структура спрощує масштабування, повторне використання коду та його підтримку в майбутньому.
Під час розробки було створено низку UML-діаграм, що відображають ключові аспекти роботи веб-застосунку. Діаграма прецедентів демонструє основні сценарії взаємодії користувачів із системою, відповідно до їх ролей. Діаграма компонентів описує архітектурну побудову інтерфейсу, показуючи, як між собою взаємодіють функціональні частини застосунку. Діаграма активності моделює логіку роботи для лікаря та адміністратора, відображаючи послідовність дій залежно від обраної ролі. Діаграма пакетів ілюструє загальну структуру проєкту та зв’язки між його модулями, дозволяючи краще зрозуміти організацію коду та потоки даних.
Ці діаграми сприяють кращому розумінню роботи системи, полегшують аналіз, документування та подальший розвиток веб-застосунку.